{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MBINCompiler What is MBINCompiler? MBINCompiler is a modding tool for the game: No Man's Sky that converts the game's MBIN data files (binary) into human-readable EXML files (text) that can be edited with any text editor and then converted back again for use in a modded game. Various MBIN files have different data formats. MBINCompiler maps all of these formats to be able to understand how to read the binary data from file, convert it to EXML and vice versa. Please note that every update to the game breaks any number of MBIN formats. This requires updating MBINCompiler for each game update and depending on the size and frequency of updates, can take some time so please be patient as new game updates roll out. Because each version of MBINCompiler is tied to a specific version of NMS, it is also very important to note that MBIN files compiled with a previous version may not be decompiled successfully with a newer version of MBINCompiler if that particular MBIN format has changed. The correct version of MBINCompiler should be used to decompile the corresponding file, then it can be updated and recompiled with the newer version. If you need to find out what version of MBINCompiler to download for a particular MBIN file, there is a --version command line option that will tell you what version the MBIN file was compiled with. You can get more information about the command line options in the User Documentation If you are a developer, you can access all the functionality that MBINCompiler uses for it's own command line interface by downloading or compiling the libMBIN.dll and linking it in your own application. The API makes things like MBIN/EXML de/serialization acessible as well as all the MBIN structure definitions. The structures are C# classes that map the mbin data as public fields, so they can be used in code like any other class. To read more about libMBIN see here If you need help, would like to help or just interested in NMS modding, check out the No Man's Sky Modding Server on discord chat.","title":"Home"},{"location":"#mbincompiler","text":"","title":"MBINCompiler"},{"location":"#what-is-mbincompiler","text":"MBINCompiler is a modding tool for the game: No Man's Sky that converts the game's MBIN data files (binary) into human-readable EXML files (text) that can be edited with any text editor and then converted back again for use in a modded game. Various MBIN files have different data formats. MBINCompiler maps all of these formats to be able to understand how to read the binary data from file, convert it to EXML and vice versa. Please note that every update to the game breaks any number of MBIN formats. This requires updating MBINCompiler for each game update and depending on the size and frequency of updates, can take some time so please be patient as new game updates roll out. Because each version of MBINCompiler is tied to a specific version of NMS, it is also very important to note that MBIN files compiled with a previous version may not be decompiled successfully with a newer version of MBINCompiler if that particular MBIN format has changed. The correct version of MBINCompiler should be used to decompile the corresponding file, then it can be updated and recompiled with the newer version. If you need to find out what version of MBINCompiler to download for a particular MBIN file, there is a --version command line option that will tell you what version the MBIN file was compiled with. You can get more information about the command line options in the User Documentation If you are a developer, you can access all the functionality that MBINCompiler uses for it's own command line interface by downloading or compiling the libMBIN.dll and linking it in your own application. The API makes things like MBIN/EXML de/serialization acessible as well as all the MBIN structure definitions. The structures are C# classes that map the mbin data as public fields, so they can be used in code like any other class. To read more about libMBIN see here If you need help, would like to help or just interested in NMS modding, check out the No Man's Sky Modding Server on discord chat.","title":"What is MBINCompiler?"},{"location":"installation/","text":"Installation Whilst MBINCompiler can be run as a standalone file, it is possible to set up MBINCompiler so that any application can understand its name by using the register function of MBINCompiler. To register MBINCompiler, open the folder where MBINCompiler has been placed, and open a command line window with administrator rights in that location. Enter MBINCompiler.exe register If no errors occurs, you can close the command window and open another one. Entering MBINCompiler should bring up the help information.","title":"Installation"},{"location":"installation/#installation","text":"Whilst MBINCompiler can be run as a standalone file, it is possible to set up MBINCompiler so that any application can understand its name by using the register function of MBINCompiler. To register MBINCompiler, open the folder where MBINCompiler has been placed, and open a command line window with administrator rights in that location. Enter MBINCompiler.exe register If no errors occurs, you can close the command window and open another one. Entering MBINCompiler should bring up the help information.","title":"Installation"},{"location":"usage/","text":"Usage If you are new to modding in NMS, check out the NMS Modding Wiki for how to get started before you continue with MBINCompiler. The getting started guide can be found here . MBINCompiler can be used in two ways; via command line, or by using drag-and-drop in Windows Explorer. Drag-and-drop In one window have the files you wish to convert, and the other window have the folder containing MBINCompiler.exe Drag the .MBIN file onto MBINCompiler.exe , and an .EXML file will be produced in the same location as the source .MBIN file. An entire folder can be dragged onto MBINCompiler.exe which will convert any .MBIN files contained within the folder recursively. Edit the .EXML file with a text editor such as Notepad++ . Drag the .EXML file onto MBINCompiler.exe , and an .MBIN file will be produced in the same location as the source .EXML file. You will be prompted to overwrite any previously existing files. Command line Coming soon!!","title":"Usage"},{"location":"usage/#usage","text":"If you are new to modding in NMS, check out the NMS Modding Wiki for how to get started before you continue with MBINCompiler. The getting started guide can be found here . MBINCompiler can be used in two ways; via command line, or by using drag-and-drop in Windows Explorer.","title":"Usage"},{"location":"usage/#drag-and-drop","text":"In one window have the files you wish to convert, and the other window have the folder containing MBINCompiler.exe Drag the .MBIN file onto MBINCompiler.exe , and an .EXML file will be produced in the same location as the source .MBIN file. An entire folder can be dragged onto MBINCompiler.exe which will convert any .MBIN files contained within the folder recursively. Edit the .EXML file with a text editor such as Notepad++ . Drag the .EXML file onto MBINCompiler.exe , and an .MBIN file will be produced in the same location as the source .EXML file. You will be prompted to overwrite any previously existing files.","title":"Drag-and-drop"},{"location":"usage/#command-line","text":"Coming soon!!","title":"Command line"},{"location":"libmbin/usage/","text":"Usage libMBIN is a public API for MBINCompiler which allows other applications to directly read and write .MBIN files. It also allows direct manipulation and creation of any MBINCompiler structs. All features of MBINCompiler/libMBIN can be accessed by simply adding libMBIN to your c# project and adding using libMBIN to the top of any file you require it in. libMBIN.FileIO This module is the primary entry point for using libMBIN. It contains a number of helpful functions that can be used to load eithe .EXML or .MBIN files into the structures used by MBINCompiler. Once you have loaded a file into the struct, you can then manipulate ony of the fields and save the structure back into either and .EXML or .MBIN file. FileIO.LoadFile(string path) Parameters: path : string The path to the file that is to be loaded. This can be either the path to an .EXML , or an .MBIN . Returns: NMSTemplate The object containing all the information from the file. To use this more effectively, this value should be cast to the correct type which can be known by observing the type of struct used in the header of the .MBIN or .EXML file. This function will automatically determine what the file type is and load the file into an NMSTemplate object. If you already know what type of fle is being passed in, or what to restrict the type of file loaded, then there are two further functions which can be used: FileIO.LoadMbin(string path) Parameters: path : string The path to the .MBIN file that is to be loaded. Returns: NMSTemplate The object containing all the information from the file. To use this more effectively, this value should be cast to the correct type which can be known by observing the type of struct used in the header of the .MBIN file. FileIO.LoadExml(string path) Parameters: path : string The path to the .EXML file that is to be loaded. Returns: NMSTemplate The object containing all the information from the file. To use this more effectively, this value should be cast to the correct type which can be known by observing the type of struct used in the header of the .EXML file. Examples: Let's say we have a file, for example, METADATA/REALITY/TABLES/BASEBUILDINGTABLE.MBIN that we wish to load and modify. The following code (ignoring not being within a proper function etc) will load the base building table and print out the id's of all objects in it. using libMBIN; using libMBIN.NMS.GameComponents; GcBaseBuildingTable bbTable = (GcBaseBuildingTable)FileIO.LoadMBin(\"BASEBUILDINGTABLE.MBIN\"); foreach (GcBaseBuildingEntry obj in bbTable.Objects) { Console.WriteLine(obj.ID); } Currently there is no way to determine automatically the data type of a file but this may come in future versions of the API. NMSTemplate The NMSTemplate is a top-level object. All of FileIO.LoadFile , FileIO.LoadMbin and FileIO.LoadExml return a NMSTemplate object. In libMBIN, all structs are subclassed from this object, meaning that you can very easily cast the NMSTemplate type to the struct type that you require. This object has a few methods that are useful to write it back to an .EXML or .MBIN file: NMSTemplate.WriteToMbin(string path) Parameters: path : string The filepath of the required output file the struct will be written to. Note that there is no check that the output file extension is actual .MBIN . This writes the current NMSTemplate object to an .MBIN file, ready to be read by the game. NMSTemplate.WriteToExml(string path) Parameters: path : string The filepath of the required output file the struct will be written to. Note that there is no check that the output file extension is actual .EXML . This writes the current NMSTemplate object to an .EXML file, ready to be modified by a user manually or through the use of another program.","title":"libMBIN"},{"location":"libmbin/usage/#usage","text":"libMBIN is a public API for MBINCompiler which allows other applications to directly read and write .MBIN files. It also allows direct manipulation and creation of any MBINCompiler structs. All features of MBINCompiler/libMBIN can be accessed by simply adding libMBIN to your c# project and adding using libMBIN to the top of any file you require it in.","title":"Usage"},{"location":"libmbin/usage/#libmbinfileio","text":"This module is the primary entry point for using libMBIN. It contains a number of helpful functions that can be used to load eithe .EXML or .MBIN files into the structures used by MBINCompiler. Once you have loaded a file into the struct, you can then manipulate ony of the fields and save the structure back into either and .EXML or .MBIN file.","title":"libMBIN.FileIO"},{"location":"libmbin/usage/#fileioloadfilestring-path","text":"Parameters: path : string The path to the file that is to be loaded. This can be either the path to an .EXML , or an .MBIN . Returns: NMSTemplate The object containing all the information from the file. To use this more effectively, this value should be cast to the correct type which can be known by observing the type of struct used in the header of the .MBIN or .EXML file. This function will automatically determine what the file type is and load the file into an NMSTemplate object. If you already know what type of fle is being passed in, or what to restrict the type of file loaded, then there are two further functions which can be used:","title":"FileIO.LoadFile(string path)"},{"location":"libmbin/usage/#fileioloadmbinstring-path","text":"Parameters: path : string The path to the .MBIN file that is to be loaded. Returns: NMSTemplate The object containing all the information from the file. To use this more effectively, this value should be cast to the correct type which can be known by observing the type of struct used in the header of the .MBIN file.","title":"FileIO.LoadMbin(string path)"},{"location":"libmbin/usage/#fileioloadexmlstring-path","text":"Parameters: path : string The path to the .EXML file that is to be loaded. Returns: NMSTemplate The object containing all the information from the file. To use this more effectively, this value should be cast to the correct type which can be known by observing the type of struct used in the header of the .EXML file.","title":"FileIO.LoadExml(string path)"},{"location":"libmbin/usage/#examples","text":"Let's say we have a file, for example, METADATA/REALITY/TABLES/BASEBUILDINGTABLE.MBIN that we wish to load and modify. The following code (ignoring not being within a proper function etc) will load the base building table and print out the id's of all objects in it. using libMBIN; using libMBIN.NMS.GameComponents; GcBaseBuildingTable bbTable = (GcBaseBuildingTable)FileIO.LoadMBin(\"BASEBUILDINGTABLE.MBIN\"); foreach (GcBaseBuildingEntry obj in bbTable.Objects) { Console.WriteLine(obj.ID); } Currently there is no way to determine automatically the data type of a file but this may come in future versions of the API.","title":"Examples:"},{"location":"libmbin/usage/#nmstemplate","text":"The NMSTemplate is a top-level object. All of FileIO.LoadFile , FileIO.LoadMbin and FileIO.LoadExml return a NMSTemplate object. In libMBIN, all structs are subclassed from this object, meaning that you can very easily cast the NMSTemplate type to the struct type that you require. This object has a few methods that are useful to write it back to an .EXML or .MBIN file:","title":"NMSTemplate"},{"location":"libmbin/usage/#nmstemplatewritetombinstring-path","text":"Parameters: path : string The filepath of the required output file the struct will be written to. Note that there is no check that the output file extension is actual .MBIN . This writes the current NMSTemplate object to an .MBIN file, ready to be read by the game.","title":"NMSTemplate.WriteToMbin(string path)"},{"location":"libmbin/usage/#nmstemplatewritetoexmlstring-path","text":"Parameters: path : string The filepath of the required output file the struct will be written to. Note that there is no check that the output file extension is actual .EXML . This writes the current NMSTemplate object to an .EXML file, ready to be modified by a user manually or through the use of another program.","title":"NMSTemplate.WriteToExml(string path)"}]}